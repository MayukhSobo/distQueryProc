// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class FileRequest;
struct FileRequestDefaultTypeInternal;
extern FileRequestDefaultTypeInternal _FileRequest_default_instance_;
class FileResponse;
struct FileResponseDefaultTypeInternal;
extern FileResponseDefaultTypeInternal _FileResponse_default_instance_;
class YearlyResult;
struct YearlyResultDefaultTypeInternal;
extern YearlyResultDefaultTypeInternal _YearlyResult_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FileRequest* Arena::CreateMaybeMessage<::FileRequest>(Arena*);
template<> ::FileResponse* Arena::CreateMaybeMessage<::FileResponse>(Arena*);
template<> ::YearlyResult* Arena::CreateMaybeMessage<::YearlyResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileRequest) */ {
 public:
  inline FileRequest() : FileRequest(nullptr) {}
  ~FileRequest() override;
  explicit PROTOBUF_CONSTEXPR FileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileRequest(const FileRequest& from);
  FileRequest(FileRequest&& from) noexcept
    : FileRequest() {
    *this = ::std::move(from);
  }

  inline FileRequest& operator=(const FileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileRequest& operator=(FileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileRequest* internal_default_instance() {
    return reinterpret_cast<const FileRequest*>(
               &_FileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileRequest& a, FileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileRequest";
  }
  protected:
  explicit FileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasePathFieldNumber = 1,
    kFileListFieldNumber = 2,
  };
  // string base_path = 1;
  void clear_base_path();
  const std::string& base_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base_path();
  PROTOBUF_NODISCARD std::string* release_base_path();
  void set_allocated_base_path(std::string* base_path);
  private:
  const std::string& _internal_base_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_path(const std::string& value);
  std::string* _internal_mutable_base_path();
  public:

  // string file_list = 2;
  void clear_file_list();
  const std::string& file_list() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_list(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_list();
  PROTOBUF_NODISCARD std::string* release_file_list();
  void set_allocated_file_list(std::string* file_list);
  private:
  const std::string& _internal_file_list() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_list(const std::string& value);
  std::string* _internal_mutable_file_list();
  public:

  // @@protoc_insertion_point(class_scope:FileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class YearlyResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YearlyResult) */ {
 public:
  inline YearlyResult() : YearlyResult(nullptr) {}
  ~YearlyResult() override;
  explicit PROTOBUF_CONSTEXPR YearlyResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  YearlyResult(const YearlyResult& from);
  YearlyResult(YearlyResult&& from) noexcept
    : YearlyResult() {
    *this = ::std::move(from);
  }

  inline YearlyResult& operator=(const YearlyResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline YearlyResult& operator=(YearlyResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const YearlyResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const YearlyResult* internal_default_instance() {
    return reinterpret_cast<const YearlyResult*>(
               &_YearlyResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(YearlyResult& a, YearlyResult& b) {
    a.Swap(&b);
  }
  inline void Swap(YearlyResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(YearlyResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  YearlyResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<YearlyResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const YearlyResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const YearlyResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YearlyResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YearlyResult";
  }
  protected:
  explicit YearlyResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMinScoreFieldNumber = 2,
    kSumScoreFieldNumber = 4,
    kCountFieldNumber = 5,
    kMaxScoreFieldNumber = 3,
  };
  // int32 year = 1;
  void clear_year();
  int32_t year() const;
  void set_year(int32_t value);
  private:
  int32_t _internal_year() const;
  void _internal_set_year(int32_t value);
  public:

  // int32 min_score = 2;
  void clear_min_score();
  int32_t min_score() const;
  void set_min_score(int32_t value);
  private:
  int32_t _internal_min_score() const;
  void _internal_set_min_score(int32_t value);
  public:

  // int64 sum_score = 4;
  void clear_sum_score();
  int64_t sum_score() const;
  void set_sum_score(int64_t value);
  private:
  int64_t _internal_sum_score() const;
  void _internal_set_sum_score(int64_t value);
  public:

  // int64 count = 5;
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // int32 max_score = 3;
  void clear_max_score();
  int32_t max_score() const;
  void set_max_score(int32_t value);
  private:
  int32_t _internal_max_score() const;
  void _internal_set_max_score(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:YearlyResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t year_;
  int32_t min_score_;
  int64_t sum_score_;
  int64_t count_;
  int32_t max_score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileResponse) */ {
 public:
  inline FileResponse() : FileResponse(nullptr) {}
  ~FileResponse() override;
  explicit PROTOBUF_CONSTEXPR FileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileResponse(const FileResponse& from);
  FileResponse(FileResponse&& from) noexcept
    : FileResponse() {
    *this = ::std::move(from);
  }

  inline FileResponse& operator=(const FileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileResponse& operator=(FileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileResponse* internal_default_instance() {
    return reinterpret_cast<const FileResponse*>(
               &_FileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileResponse& a, FileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileResponse";
  }
  protected:
  explicit FileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearlyResultsFieldNumber = 1,
  };
  // repeated .YearlyResult yearly_results = 1;
  int yearly_results_size() const;
  private:
  int _internal_yearly_results_size() const;
  public:
  void clear_yearly_results();
  ::YearlyResult* mutable_yearly_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YearlyResult >*
      mutable_yearly_results();
  private:
  const ::YearlyResult& _internal_yearly_results(int index) const;
  ::YearlyResult* _internal_add_yearly_results();
  public:
  const ::YearlyResult& yearly_results(int index) const;
  ::YearlyResult* add_yearly_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YearlyResult >&
      yearly_results() const;

  // @@protoc_insertion_point(class_scope:FileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YearlyResult > yearly_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileRequest

// string base_path = 1;
inline void FileRequest::clear_base_path() {
  base_path_.ClearToEmpty();
}
inline const std::string& FileRequest::base_path() const {
  // @@protoc_insertion_point(field_get:FileRequest.base_path)
  return _internal_base_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileRequest::set_base_path(ArgT0&& arg0, ArgT... args) {
 
 base_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileRequest.base_path)
}
inline std::string* FileRequest::mutable_base_path() {
  std::string* _s = _internal_mutable_base_path();
  // @@protoc_insertion_point(field_mutable:FileRequest.base_path)
  return _s;
}
inline const std::string& FileRequest::_internal_base_path() const {
  return base_path_.Get();
}
inline void FileRequest::_internal_set_base_path(const std::string& value) {
  
  base_path_.Set(value, GetArenaForAllocation());
}
inline std::string* FileRequest::_internal_mutable_base_path() {
  
  return base_path_.Mutable(GetArenaForAllocation());
}
inline std::string* FileRequest::release_base_path() {
  // @@protoc_insertion_point(field_release:FileRequest.base_path)
  return base_path_.Release();
}
inline void FileRequest::set_allocated_base_path(std::string* base_path) {
  if (base_path != nullptr) {
    
  } else {
    
  }
  base_path_.SetAllocated(base_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (base_path_.IsDefault()) {
    base_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileRequest.base_path)
}

// string file_list = 2;
inline void FileRequest::clear_file_list() {
  file_list_.ClearToEmpty();
}
inline const std::string& FileRequest::file_list() const {
  // @@protoc_insertion_point(field_get:FileRequest.file_list)
  return _internal_file_list();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileRequest::set_file_list(ArgT0&& arg0, ArgT... args) {
 
 file_list_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FileRequest.file_list)
}
inline std::string* FileRequest::mutable_file_list() {
  std::string* _s = _internal_mutable_file_list();
  // @@protoc_insertion_point(field_mutable:FileRequest.file_list)
  return _s;
}
inline const std::string& FileRequest::_internal_file_list() const {
  return file_list_.Get();
}
inline void FileRequest::_internal_set_file_list(const std::string& value) {
  
  file_list_.Set(value, GetArenaForAllocation());
}
inline std::string* FileRequest::_internal_mutable_file_list() {
  
  return file_list_.Mutable(GetArenaForAllocation());
}
inline std::string* FileRequest::release_file_list() {
  // @@protoc_insertion_point(field_release:FileRequest.file_list)
  return file_list_.Release();
}
inline void FileRequest::set_allocated_file_list(std::string* file_list) {
  if (file_list != nullptr) {
    
  } else {
    
  }
  file_list_.SetAllocated(file_list, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_list_.IsDefault()) {
    file_list_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FileRequest.file_list)
}

// -------------------------------------------------------------------

// YearlyResult

// int32 year = 1;
inline void YearlyResult::clear_year() {
  year_ = 0;
}
inline int32_t YearlyResult::_internal_year() const {
  return year_;
}
inline int32_t YearlyResult::year() const {
  // @@protoc_insertion_point(field_get:YearlyResult.year)
  return _internal_year();
}
inline void YearlyResult::_internal_set_year(int32_t value) {
  
  year_ = value;
}
inline void YearlyResult::set_year(int32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:YearlyResult.year)
}

// int32 min_score = 2;
inline void YearlyResult::clear_min_score() {
  min_score_ = 0;
}
inline int32_t YearlyResult::_internal_min_score() const {
  return min_score_;
}
inline int32_t YearlyResult::min_score() const {
  // @@protoc_insertion_point(field_get:YearlyResult.min_score)
  return _internal_min_score();
}
inline void YearlyResult::_internal_set_min_score(int32_t value) {
  
  min_score_ = value;
}
inline void YearlyResult::set_min_score(int32_t value) {
  _internal_set_min_score(value);
  // @@protoc_insertion_point(field_set:YearlyResult.min_score)
}

// int32 max_score = 3;
inline void YearlyResult::clear_max_score() {
  max_score_ = 0;
}
inline int32_t YearlyResult::_internal_max_score() const {
  return max_score_;
}
inline int32_t YearlyResult::max_score() const {
  // @@protoc_insertion_point(field_get:YearlyResult.max_score)
  return _internal_max_score();
}
inline void YearlyResult::_internal_set_max_score(int32_t value) {
  
  max_score_ = value;
}
inline void YearlyResult::set_max_score(int32_t value) {
  _internal_set_max_score(value);
  // @@protoc_insertion_point(field_set:YearlyResult.max_score)
}

// int64 sum_score = 4;
inline void YearlyResult::clear_sum_score() {
  sum_score_ = int64_t{0};
}
inline int64_t YearlyResult::_internal_sum_score() const {
  return sum_score_;
}
inline int64_t YearlyResult::sum_score() const {
  // @@protoc_insertion_point(field_get:YearlyResult.sum_score)
  return _internal_sum_score();
}
inline void YearlyResult::_internal_set_sum_score(int64_t value) {
  
  sum_score_ = value;
}
inline void YearlyResult::set_sum_score(int64_t value) {
  _internal_set_sum_score(value);
  // @@protoc_insertion_point(field_set:YearlyResult.sum_score)
}

// int64 count = 5;
inline void YearlyResult::clear_count() {
  count_ = int64_t{0};
}
inline int64_t YearlyResult::_internal_count() const {
  return count_;
}
inline int64_t YearlyResult::count() const {
  // @@protoc_insertion_point(field_get:YearlyResult.count)
  return _internal_count();
}
inline void YearlyResult::_internal_set_count(int64_t value) {
  
  count_ = value;
}
inline void YearlyResult::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:YearlyResult.count)
}

// -------------------------------------------------------------------

// FileResponse

// repeated .YearlyResult yearly_results = 1;
inline int FileResponse::_internal_yearly_results_size() const {
  return yearly_results_.size();
}
inline int FileResponse::yearly_results_size() const {
  return _internal_yearly_results_size();
}
inline void FileResponse::clear_yearly_results() {
  yearly_results_.Clear();
}
inline ::YearlyResult* FileResponse::mutable_yearly_results(int index) {
  // @@protoc_insertion_point(field_mutable:FileResponse.yearly_results)
  return yearly_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YearlyResult >*
FileResponse::mutable_yearly_results() {
  // @@protoc_insertion_point(field_mutable_list:FileResponse.yearly_results)
  return &yearly_results_;
}
inline const ::YearlyResult& FileResponse::_internal_yearly_results(int index) const {
  return yearly_results_.Get(index);
}
inline const ::YearlyResult& FileResponse::yearly_results(int index) const {
  // @@protoc_insertion_point(field_get:FileResponse.yearly_results)
  return _internal_yearly_results(index);
}
inline ::YearlyResult* FileResponse::_internal_add_yearly_results() {
  return yearly_results_.Add();
}
inline ::YearlyResult* FileResponse::add_yearly_results() {
  ::YearlyResult* _add = _internal_add_yearly_results();
  // @@protoc_insertion_point(field_add:FileResponse.yearly_results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YearlyResult >&
FileResponse::yearly_results() const {
  // @@protoc_insertion_point(field_list:FileResponse.yearly_results)
  return yearly_results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
